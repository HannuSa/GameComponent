bool loadOBJ(const char* path, std::vector<GLfloat> &out_vertices, std::vector<GLuint> &out_indices)
{
	std::vector< GLuint > vertexIndices, uvIndices;
	std::vector< glm::vec3 > temp_vertices;
	std::vector< glm::vec2 > temp_uvs;

	FILE * file = fopen(path, "r");
	if (file == NULL)
	{
		errorMessage("Impossible to open the file!");
		return false;
	}

	while (1)
	{
		char lineHeader[128];
		// read the first word of the line
		int res = fscanf(file, "%s", lineHeader);
		if (res == EOF)
			break; // EOF = End Of File. Quit the loop.

		// else : parse lineHeader

		if (strcmp(lineHeader, "v") == 0)
		{
			glm::vec3 vertex;
			fscanf(file, "%f %f %f\n", &vertex.x, &vertex.y, &vertex.z);
			temp_vertices.push_back(vertex);
		}
		else if ( strcmp( lineHeader, "vt" ) == 0 )
		{
			glm::vec2 uv;
			fscanf(file, "%f %f\n", &uv.x, &uv.y);
			temp_uvs.push_back(uv);
		}
		else if (strcmp(lineHeader, "f") == 0){
			//std::string vertex1, vertex2, vertex3;
			unsigned int vertexIndex[3], uvIndex[3];
			int matches = fscanf(file, "%d/%d %d/%d %d/%d\n", &vertexIndex[0], &uvIndex[0], &vertexIndex[1], &uvIndex[1], &vertexIndex[2], &uvIndex[2]);
			if (matches != 6){
				errorMessage("File can't be read by our simple parser");
				return false;
			}
			vertexIndices.push_back(vertexIndex[0] - 1);
			vertexIndices.push_back(vertexIndex[1] - 1);
			vertexIndices.push_back(vertexIndex[2] - 1);
			uvIndices.push_back(uvIndex[0] - 1);
			uvIndices.push_back(uvIndex[1] - 1);
			uvIndices.push_back(uvIndex[2] - 1);
			
		}
	}

	out_vertices.resize(vertexIndices.size() * 5);
	unsigned int index, index2;

	for (unsigned int i = 0; i < vertexIndices.size(); i++)
	{
		index = vertexIndices[i];
		out_vertices[5 * index] = temp_vertices[vertexIndices[i]].x;
		out_vertices[5 * index + 1] = temp_vertices[vertexIndices[i]].y;
		out_vertices[5 * index + 2] = temp_vertices[vertexIndices[i]].z;

		index2 = uvIndices[i];
		out_vertices[5 * index2 + 3] = temp_uvs[uvIndices[i]].x;
		out_vertices[5 * index2 + 4] = temp_uvs[uvIndices[i]].y;
	}


	out_indices = vertexIndices;
	return true;
}